import time
import random

# 1Ô∏è‚É£ Contagem Progressiva
# Pe√ßa ao usu√°rio um n√∫mero inteiro positivo n e exiba uma contagem de 1 at√© n.

# Exemplo:
# Entrada: 5
# Sa√≠da: 1 2 3 4 5

def contagem(n):
    n1 = 0
    while n1 < n:
        n1 += 1
        time.sleep(1)
        print(f"{n1}")

# contagem(int(input("Informe um numero para contagem:")))


# 2Ô∏è‚É£ Contagem Regressiva
# Solicite um n√∫mero ao usu√°rio e exiba uma contagem regressiva at√© 0.

# Exemplo:
# Entrada: 5
# Sa√≠da: 5 4 3 2 1 0

def regressiva(n):
    while n >= 0:
        print(n)
        n -= 1


# regressiva(int(input("Digite um numero para contarmos at√© 0: ")))


# 3Ô∏è‚É£ Soma dos N primeiros n√∫meros
# Pe√ßa um n√∫mero n e calcule a soma de todos os n√∫meros de 1 at√© n.

# Exemplo:
# Entrada: 4
# C√°lculo: 1 + 2 + 3 + 4 = 10
# Sa√≠da: A soma √© 10

def calcule(n):
    x = 0
    cont = 0
    while cont < n:
         cont += 1
         print(x)
         x = x + cont
    
    print(f"a soma de todos os numeros que antecedem {n} √© {x}.")

# calcule(int(input("Digite um numero: ")))

# 4Ô∏è‚É£ Adivinhe o N√∫mero
# O programa escolhe um n√∫mero secreto entre 1 e 10. O usu√°rio deve tentar adivinhar o n√∫mero at√© acertar. No final, o programa exibe quantas tentativas foram necess√°rias.

def adivinha(n):
    geranum = random.randint(1, 10)
    tentativas = 0
    while n < 1 or n > 10:
            print("Por Favor Digite um numero: ")
            int(input("Por favor digite um numero de 1 a 10:\n"))

    while n != geranum:
         tentativas += 1
         print(f"{n} N√£o √© o numero escolhido por min, tente denovo:")
         n = int(input())
    tentativas += 1
    print(f"Voc√™ acertou, depois de {tentativas} tentativas.")
# adivinha(int(input("Por favor digite um numero de 1 a 10:\n")))

# 5Ô∏è‚É£ Tabuada
# Pe√ßa ao usu√°rio um n√∫mero e exiba a tabuada desse n√∫mero de 1 a 10.

# Exemplo:
# Entrada: 3
# Sa√≠da:

# python-repl
# Copiar
# Editar
# 3 x 1 = 3
# 3 x 2 = 6
# ...
# 3 x 10 = 30



# 6Ô∏è‚É£ Contando Pares e √çmpares
# O programa deve pedir n√∫meros ao usu√°rio at√© que ele digite 0. No final, exiba quantos n√∫meros pares e quantos n√∫meros √≠mpares foram digitados.

def par_impar():
    n = -1
    par = 0
    impar =0
    while n != 0:
        n = int(input("Digite um numero, digite 0 quando quiser terminar: "))
        if n % 2 == 0:
               par += 1
        else: 
               impar += 1
    print(f"foram digitados {par} numeros par e {impar} numeros impares")

# par_impar()

# 7Ô∏è‚É£ Fatorial de um N√∫mero
# Solicite um n√∫mero inteiro positivo n e calcule o fatorial de n.

# Exemplo:
# Entrada: 5
# C√°lculo: 5! = 5 √ó 4 √ó 3 √ó 2 √ó 1 = 120
# Sa√≠da: O fatorial de 5 √© 120

def fatorial():
    n1 = int(input("Digite um numero "))
    fatorial = n1  
    while fatorial > 1:
        fatorial -= 1
        n1 *= fatorial
    print(n1)

# fatorial()
# 8Ô∏è‚É£ M√©dia de N√∫meros
# Pe√ßa ao usu√°rio para inserir uma quantidade indefinida de n√∫meros e calcule a m√©dia. O processo deve parar quando o usu√°rio digitar 0.

def media():
    n = -1
    c = 0
    s = 0
    
    while n != 0:
          n = int(input("Digite um numero, Digite 0 para parar:"))
          s += n
          c += 1
    resultado = s / (c - 1)
    print(F"a m√©dia dos numeros digitados √©: {round(resultado)}")

# media()
          

# 9Ô∏è‚É£ N√∫meros √çmpares em um Intervalo
# Solicite dois n√∫meros inteiros a e b e exiba todos os n√∫meros √≠mpares entre a e b (inclusive).

def impares():
     n1 = int(input("Digite um numero: "))
     n2 = int(input("Digite outro numero: "))
     impar = []
     while n1 <= n2:
          if n1 % 2 == 1:
            impar.append(n1)
          n1 += 1
          
     print(impar)
# impares()
               
# üîü Sequ√™ncia de Fibonacci
# Pe√ßa ao usu√°rio um n√∫mero n e exiba os primeiros n termos da sequ√™ncia de Fibonacci.

# Exemplo:
# Entrada: 6
# Sa√≠da: 0 1 1 2 3 5]

def fibonacci():
    n = int(input("Digite um numero: "))
    lista = []
    fibo = 0
    n1 = 1
    n2 = 0
    while len(lista) < n:
        lista.append(fibo)
        n2 = n1
        n1 = fibo
        fibo = n1 + n2
    
    print(lista)
# fibonacci()
         

# 1Ô∏è‚É£1Ô∏è‚É£ N√∫mero Invertido
# Pe√ßa um n√∫mero inteiro positivo ao usu√°rio e exiba esse n√∫mero invertido.

# Exemplo:
# Entrada: 1234
# Sa√≠da: 4321

# 1Ô∏è‚É£2Ô∏è‚É£ Verifica√ß√£o de Pal√≠ndromo
# Pe√ßa ao usu√°rio uma palavra ou n√∫mero e verifique se √© um pal√≠ndromo (ou seja, se pode ser lido da mesma forma de tr√°s para frente).

# Exemplo:
# Entrada: radar
# Sa√≠da: "radar" √© um pal√≠ndromo

# 1Ô∏è‚É£3Ô∏è‚É£ Pot√™ncia de um N√∫mero
# Pe√ßa ao usu√°rio dois n√∫meros, base e expoente, e calcule o resultado de base^expoente.
# Exemplo:
# Entrada: 2 5
# C√°lculo: 2‚Åµ = 32
# Sa√≠da: O resultado √© 32
def potencia():
     n1 = int(input("Insira um numero base: "))
     n2 = int(input("Insira o numero que sera o expoente: "))
     resultado = n1 ** n2
     print(" O resultado da conta √©", resultado)
# potencia()

# 1Ô∏è‚É£4Ô∏è‚É£ Divisores de um N√∫mero
# Pe√ßa um n√∫mero ao usu√°rio e exiba todos os seus divisores.

# Exemplo:
# Entrada: 12
# Sa√≠da: 1, 2, 3, 4, 6, 12

def divisores():
     n1 = int(input("Digite um numero "))
     contador = 0
     lista = []
     while contador <= n1:
        contador += 1
        if n1 % contador == 0:
            lista.append(contador)
     print(lista)         
# divisores()

# 1Ô∏è‚É£5Ô∏è‚É£ N√∫mero Perfeito
# Solicite um n√∫mero ao usu√°rio e verifique se ele √© um n√∫mero perfeito (um n√∫mero cuja soma de seus divisores pr√≥prios √© igual a ele mesmo).

# Exemplo:
# Entrada: 6
# Divisores pr√≥prios: 1, 2, 3
# Soma: 1 + 2 + 3 = 6
# Sa√≠da: 6 √© um n√∫mero perfeito

def perfeito():
    n1 = int(input("Digite um n√∫mero: "))
    contador = n1
    lista = []
    while contador > 1:
         contador -= 1
         if n1 % contador == 0:
              lista.append(contador)
    if sum(lista) == n1:
         print(f"O {n1} √© um numero perfeito")
    else:
         print(f"O {n1} n√£o √© um numero perfeito")
# perfeito()

# 1Ô∏è‚É£6Ô∏è‚É£ Contagem de D√≠gitos
# Pe√ßa um n√∫mero ao usu√°rio e exiba quantos d√≠gitos ele possui.

# Exemplo:
# Entrada: 9876
# Sa√≠da: O n√∫mero 9876 tem 4 d√≠gitos.

def contagem():
    n1 = input("Digite um n√∫mero: ")
    digitos = 0
    for c in n1:
         digitos += 1
    print(f"{n1} Tem um total de {digitos} digito(s)")
# ou
    print(f"O {n1} tem {len(n1)} d√≠gito(s)")

# contagem()

# 1Ô∏è‚É£7Ô∏è‚É£ Produto dos D√≠gitos
# Solicite um n√∫mero inteiro positivo e calcule o produto de seus d√≠gitos.

# Exemplo:
# Entrada: 1234
# C√°lculo: 1 √ó 2 √ó 3 √ó 4 = 24
# Sa√≠da: O produto dos d√≠gitos √© 24

def produto():
     n = input("Digite uma dezena ou superior: ")
     n1 = []
     resultado = 1
     for _ in n:
        n1.append(int(_))
     for num in n1:
          resultado *= num
     print(resultado)
# produto()

# 1Ô∏è‚É£8Ô∏è‚É£ Soma de N√∫meros Pares em um Intervalo
# Pe√ßa dois n√∫meros a e b e calcule a soma de todos os n√∫meros pares entre eles (inclusive).

def soma_pares():
     n1 = int(input("insira o 1¬∫ numero: "))
     n1_copy = n1
     n2 = int(input("Insira o 2¬∫ numero: "))
     lista = []
     while n1 < n2:
        n1 += 1
        if n1 % 2 == 0:
             lista.append(n1)
        
     print(f"a soma dos n√∫meros pares entre {n1_copy} e {n2} √© {sum(lista)}")
soma_pares()
# 1Ô∏è‚É£9Ô∏è‚É£ Contagem de Vogais em uma Palavra
# Pe√ßa ao usu√°rio uma palavra e conte quantas vogais (a, e, i, o, u) existem nela.

# Exemplo:
# Entrada: "programa√ß√£o"
# Sa√≠da: Existem 5 vogais.



# 2Ô∏è‚É£0Ô∏è‚É£ Quadrado M√°gico 3x3
# Solicite ao usu√°rio 9 n√∫meros e organize-os em uma matriz 3x3. Depois, verifique se a matriz forma um quadrado m√°gico (a soma de cada linha, coluna e diagonal deve ser a mesma).
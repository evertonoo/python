import random

# 1. N√∫meros primos
# Escreva um programa que recebe um n√∫mero inteiro n do usu√°rio e verifica se ele √© primo.

def eh_primo(n):
    if n <= 1:
        return False
    if n == 2:
        return True  # 2 √© o √∫nico n√∫mero primo par
    
    # Se for par e diferente de 2, j√° n√£o √© primo
    if n % 2 == 0:
        return False

    # Testa apenas os √≠mpares de 3 at√© a raiz quadrada de n
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return False
    return True
# Entrada do usu√°rio
# num = int(input("Digite um n√∫mero inteiro: "))

# Verifica e exibe o resultado
# if eh_primo(num):
#     print(f"{num} √© um n√∫mero primo.")
# else:
#     print(f"{num} n√£o √© um n√∫mero primo.")


# 2. Pal√≠ndromo
# Pe√ßa ao usu√°rio para digitar uma palavra e verifique se ela √© um pal√≠ndromo (ou seja, se pode ser lida da mesma forma de tr√°s para frente).

def palindromo():
    palavra = input("Escolha uma palavra: ")
    palavra = palavra.lower()
    if palavra == palavra[::-1]:
        print(f"{palavra} √© um palindromo")
    
    else:print(f"{palavra} n√£o √© um palindromo")
        

# palindromo()

# 3. Soma de d√≠gitos
# Crie um programa que recebe um n√∫mero inteiro positivo e calcula a soma de seus d√≠gitos.

def numeros(n):

    print(sum(int(i) for i in (n)))

# numeros(input("Digite um numero para somarmos"))

# 4. Contagem de vogais e consoantes
# Solicite ao usu√°rio uma frase e conte quantas vogais e quantas consoantes existem nela.

def contagem(n):
    vogal = 0
    consoante = 0
    
    for c in n:
        if c.isalpha() == "a" or c == "e" or c == "i" or c == "o" or c == "u":
            vogal += 1
        
        else: consoante += 1

    print(f"Voc√™ tem {vogal} vogais e {consoante} consoante(s)")

# contagem(input("Digie uma palavra: ")) 

# 5. M√©dia de n√∫meros
# O usu√°rio deve inserir n√∫meros continuamente at√© digitar 0. O programa ent√£o deve calcular a m√©dia dos n√∫meros inseridos.

def calculo():
    numeros = []
    contador = 0
    a = 0
    
    while stop != 0:
        stop = int(input("Digite um numero: "))
        
        if stop != 0:
            contador += 1
            numeros += [stop]
            print(contador)
        else:
            for n in numeros:
                a += n
            resultado = a / contador
            print(resultado)

# calculo()

# 6. Adivinha√ß√£o de n√∫mero
# O computador deve gerar um n√∫mero aleat√≥rio de 1 a 50. O usu√°rio deve tentar adivinhar esse n√∫mero
#  e o programa deve indicar se o palpite √© maior ou menor que o n√∫mero correto at√© que o jogador acerte.
def adivinha():

    n1 = random.randint(1,50)
    n2 = 0
    while n1 != n2:
        n2 = int(input("Escolha um numero de 1 a 50: "))

        if n2 < 0 or n2 > 50:
            print(f"Por favor {n2} n√£o esta entre os numeros que te pedi, por favor digite novamente: ")
            n1 = int(input())
        elif n2 < n1:
            print(f"O numero {n2} √© menor que meu numero:")
        elif n2 > n1:
            print(f"O numero {n2} √© maior que meu numero:")
        else:
            print(f"Parabens meu numero era {n1} igual o seu {n2}")
# adivinha()

# 7. Fatorial de um n√∫mero
# Crie uma fun√ß√£o que receba um n√∫mero n e retorne o fatorial de n.

def fatorial(n1):
        cn1 = n1
        resultado = 1
        while cn1 > 0:
            resultado *= cn1
            cn1 -= 1
        print(f"o fatorial de {n1} √©: {resultado}")
# fatorial(int(input("Digite um nunero: ")))

# 8. Fibonacci at√© N
# Pe√ßa ao usu√°rio um n√∫mero N e gere a sequ√™ncia de Fibonacci at√© esse n√∫mero.

def fibonacci():
    n = int(input("Digite um n√∫mero N para gerar a sequ√™ncia de Fibonacci at√© ele: "))
    
    # Inicializa os dois primeiros n√∫meros da sequ√™ncia
    a, b = 0, 1

    print("Sequ√™ncia de Fibonacci:")
    while a <= n:
        print(a, end=" ")  # Imprime os valores na mesma linha
        a, b = b, a + b  # Atualiza os valores para o pr√≥ximo termo

#fibonacci()


# 9. N√∫meros pares e √≠mpares separados
# Pe√ßa ao usu√°rio para inserir 10 n√∫meros e armazene-os separadamente em listas de pares e √≠mpares.
#  No final, exiba as duas listas.

def par_impar():
    impar =[] #inicia uma lista vazia
    par = [] #inicia uma lista vazia
    contador = 0 #inicia um numero
    while contador != 10: #enquanto contador for diferente de 10 fica repetindo oque ta aqui dentro
            contador += 1 # contador recebe +1 agora contador √© 1 na proxima repeti√ß√£o vai ser 2
            n1 = int(input("Digite um numero: ")) #recebe o numero  que o usuario escolheu
            if n1 % 2 == 0: #se o resto da divis√£o do numero que o usario escolheu for 0 a lista par recebe o numero do usuario
                par +=[n1]
            else: # se for qualquer numero diferente de 0 a lista impar recebe o numero
                impar +=[n1]
        #aqui acaba o codigo e volta a verificar se contador √© diferente de 10
        
    print(f"Os numeros impares est√£o aqui {impar}\nAqui est√£o os pares{par}") #mostra uma mensagem com os numeros em cada lista depois que o contador chegou a 10

# par_impar()

# 10. Criptografia simples
# Pe√ßa ao usu√°rio uma palavra e substitua cada vogal por um caractere *, exibindo a palavra modificada.

def criptografia_simples(senha):
    cripto = ""
    for _ in senha:
        if _ in "aeiouAEIOU":
            _ = "*"
            cripto += _
        else: cripto += _

    print(cripto)
        
# criptografia_simples(input("Digite uma senha: "))

#DESAFIO EXTRA
# üìå Desafio: Analisador de Textos para Digita√ß√£o R√°pida
# Imagine que voc√™ trabalha como desenvolvedor em uma empresa de cursos online, 
# e seu chefe pediu para voc√™ criar um analisador de dificuldade de digita√ß√£o.

# Seu programa deve:

# Solicitar ao usu√°rio um texto.
# # Contar quantas vogais e consoantes existem no texto.
# Medir o tamanho m√©dio das palavras digitadas.
# Exibir um √≠ndice de dificuldade, baseado na quantidade de consoantes e no tamanho m√©dio das palavras.
# üìä Como calcular a dificuldade do texto?
# F√°cil: Muitas vogais e palavras curtas (m√©dia ‚â§ 4 letras).
# M√©dio: Equil√≠brio entre vogais/consoantes e palavras com 5-7 letras.
# Dif√≠cil: Muitas consoantes e palavras longas (m√©dia ‚â• 8 letras).

# def extra(texto):
#     v = 0
#     c = 0
#     texto1 = texto.split()
#     texto = texto.replace(" ","")
#     #contar vogais
#     for _ in texto:
#         if _ in "aeiouAEIOU":
#             v += 1
#         else: c += 1
#     print(f"Existem {v} vogais no seu texto, e {c} consoantes\n{texto1}")
#     for a in texto1:
#         if a in "aeiouAEIOU":
#             print(a)

# extra(input(str("Digite um texto:\n")))

# Solicitar ao usu√°rio um texto
texto = input("Digite um texto: ").strip()

# Contar vogais e consoantes
vogais = "aeiouAEIOU"
qtd_vogais = 0
qtd_consoantes = 0

for char in texto:
    if char.isalpha():  # S√≥ letras
        if char in vogais:
            qtd_vogais += 1
        else:
            qtd_consoantes += 1

# Medir o tamanho m√©dio das palavras
palavras = texto.split()
total_letras = sum(len(palavra) for palavra in palavras)
qtd_palavras = len(palavras)

if qtd_palavras > 0:
    media_tamanho = total_letras / qtd_palavras
else:
    media_tamanho = 0

# Exibir os resultados
print(f"\nVogais: {qtd_vogais}")
print(f"Consoantes: {qtd_consoantes}")
print(f"Tamanho m√©dio das palavras: {media_tamanho:.2f}")

# √çndice de dificuldade
if qtd_vogais > qtd_consoantes and media_tamanho <= 4:
    dificuldade = "F√°cil"
elif qtd_consoantes > qtd_vogais and media_tamanho >= 8:
    dificuldade = "Dif√≠cil"
else:
    dificuldade = "M√©dio"

print(f"Dificuldade do texto: {dificuldade}")



    

